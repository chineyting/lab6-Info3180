{"_id":"node-static","_rev":"46-f94671d61373565c1abc7133926b5cc5","name":"node-static","description":"simple, compliant file streaming module for node","dist-tags":{"latest":"0.7.3"},"versions":{"0.5.6":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[],"licenses":["MIT"],"dependencies":{},"lib":"lib","main":"./lib/node-static","version":"0.5.6","directories":{"test":"./test"},"engines":{"node":">= 0.4.1"},"devDependencies":{},"_id":"node-static@0.5.6","_engineSupported":true,"_npmVersion":"1.0.1rc7","_nodeVersion":"v0.4.5","_defaultsLoaded":true,"dist":{"shasum":"50be3328f1d5307e5303ca57137f3dcd665a761e","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.5.6.tgz"}},"0.5.7":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[],"licenses":["MIT"],"dependencies":{},"lib":"lib","main":"./lib/node-static","version":"0.5.7","directories":{"test":"./test"},"engines":{"node":">= 0.4.1"},"devDependencies":{},"_id":"node-static@0.5.7","_engineSupported":true,"_npmVersion":"1.0.1rc7","_nodeVersion":"v0.4.5","_defaultsLoaded":true,"dist":{"shasum":"e49dd773c5cdd62629de4a2cf1f68800e9ce4dbb","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.5.7.tgz"}},"0.5.8":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[],"licenses":["MIT"],"dependencies":{},"lib":"lib","main":"./lib/node-static","version":"0.5.8","directories":{"test":"./test"},"engines":{"node":">= 0.4.1"},"devDependencies":{},"_id":"node-static@0.5.8","_engineSupported":true,"_npmVersion":"1.0.1rc7","_nodeVersion":"v0.4.5","_defaultsLoaded":true,"dist":{"shasum":"55de9527a2b8d119ee558e4d99777114741e7cb1","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.5.8.tgz"},"maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"}]},"0.5.9":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[],"licenses":["MIT"],"dependencies":{},"lib":"lib","main":"./lib/node-static","version":"0.5.9","directories":{"test":"./test"},"engines":{"node":">= 0.4.1"},"devDependencies":{},"_id":"node-static@0.5.9","_engineSupported":true,"_npmVersion":"1.0.1rc7","_nodeVersion":"v0.4.5","_defaultsLoaded":true,"dist":{"shasum":"2f5bf30949e1735958266c269413aebce8cbe899","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.5.9.tgz"},"maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"}]},"0.6.0":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"git://github.com/cloudhead/node-static.git"},"main":"./lib/node-static","license":"MIT","dependencies":{},"version":"0.6.0","engines":{"node":">= 0.4.1"},"_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"_id":"node-static@0.6.0","devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.25","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"e8543a897f3c82048220b39569284d44796eb1e2","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.6.0.tgz"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nsynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new(static.Server)('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        });\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        });\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        });\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        });\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\n","maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.6.1":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"git://github.com/cloudhead/node-static.git"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.6.1","engines":{"node":">= 0.4.1"},"_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"_id":"node-static@0.6.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.25","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"d1d03770e73c0bbdfb815ea4b46583527cc6b318","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.6.1.tgz"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new(static.Server)('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        });\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        });\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        });\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        });\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revaliate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.6.2":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"git://github.com/cloudhead/node-static.git"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.6.2","engines":{"node":">= 0.4.1"},"_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"_id":"node-static@0.6.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.25","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"bfb1afc3d6c1e72c3b1228ee7efdb0838e752028","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.6.2.tgz"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new(static.Server)('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        });\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        });\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        });\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        });\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revaliate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.6.3":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"git://github.com/cloudhead/node-static.git"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.6.3","engines":{"node":">= 0.4.1"},"_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"_id":"node-static@0.6.3","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.25","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"d7b7486e12d6edf94d0b20f112594f41a3965a7e","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.6.3.tgz"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new(static.Server)('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        });\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        });\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        });\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        });\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revaliate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.6.4":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"git://github.com/cloudhead/node-static.git"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.6.4","engines":{"node":">= 0.4.1"},"_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"_id":"node-static@0.6.4","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.25","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"4373b69f6e3f5b680959246d1e3c20cfe406761c","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.6.4.tgz"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new(static.Server)('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        });\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        });\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        });\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        });\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revaliate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.6.5":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"git://github.com/cloudhead/node-static.git"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.6.5","engines":{"node":">= 0.4.1"},"_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"_id":"node-static@0.6.5","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.25","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"b8b7eec0f54aefba09a216bf537c38adf831789d","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.6.5.tgz"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new(static.Server)('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        });\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        });\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        });\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        });\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revaliate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.6.6":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"git://github.com/cloudhead/node-static.git"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.6.6","engines":{"node":">= 0.4.1"},"_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"_id":"node-static@0.6.6","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.25","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"7a6e190d8c9e165a28e124a9f3ca035d76ab53de","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.6.6.tgz"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new(static.Server)('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        });\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        });\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        });\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        });\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revaliate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.6.7":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"git://github.com/cloudhead/node-static.git"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.6.7","engines":{"node":">= 0.4.1"},"_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"_id":"node-static@0.6.7","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.25","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"e22672a4f8c0df45a828413fe5c65d9e9434efe7","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.6.7.tgz"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new(static.Server)('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        });\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        });\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        });\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        });\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revalidate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.6.8":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"http://github.com/cloudhead/node-static"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0","mime":">=1.2.9"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.6.8","engines":{"node":">= 0.4.1"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new(static.Server)('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        });\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        });\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        });\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        });\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revalidate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","readmeFilename":"README.md","_id":"node-static@0.6.8","dist":{"shasum":"f0e43d10d51280f8fac1d54dd09d94ed20ce0d7f","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.6.8.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.6.9":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"http://github.com/cloudhead/node-static"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0","mime":">=1.2.9"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.6.9","engines":{"node":">= 0.4.1"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new(static.Server)('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        });\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        });\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        });\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        });\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revalidate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","readmeFilename":"README.md","_id":"node-static@0.6.9","dist":{"shasum":"19961edd35703c8cc92c28a436d3f5dd1a1d91da","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.6.9.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.7.0":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"http://github.com/cloudhead/node-static"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0","mime":">=1.2.9"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.7.0","engines":{"node":">= 0.4.1"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new(static.Server)('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        }).resume();\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n \n    var static = require('node-static');\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        }).resume();\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        }).resume();\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var static = require('node-static');\n    \n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        }).resume();\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\n#### `gzip` #\n\nEnable support for sending compressed responses.  This will enable a check for a\nfile with the same name plus '.gz' in the same folder.  If the compressed file is\nfound and the client has indicated support for gzip file transfer, the contents\nof the .gz file will be sent in place of the uncompressed file along with a\nContent-Encoding: gzip header to inform the client the data has been compressed.\n\nexample: `{ gzip: true }`\nexample: `{ gzip: /^\\/text/ }`\n\nPassing `true` will enable this check for all files.\nPassing a RegExp instance will only enable this check if the content-type of the\nrespond would match that RegExp using its test() method.\n\n> Defaults to `false`\n\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revalidate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","readmeFilename":"README.md","_id":"node-static@0.7.0","dist":{"shasum":"df0830785b2d6e008e3648e622750f9234f6ab23","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.7.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.7.1":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"http://github.com/cloudhead/node-static"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0","mime":">=1.2.9"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.7.1","engines":{"node":">= 0.4.1"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        }).resume();\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n \n    var static = require('node-static');\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        }).resume();\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        }).resume();\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var static = require('node-static');\n    \n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        }).resume();\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\n#### `gzip` #\n\nEnable support for sending compressed responses.  This will enable a check for a\nfile with the same name plus '.gz' in the same folder.  If the compressed file is\nfound and the client has indicated support for gzip file transfer, the contents\nof the .gz file will be sent in place of the uncompressed file along with a\nContent-Encoding: gzip header to inform the client the data has been compressed.\n\nexample: `{ gzip: true }`\nexample: `{ gzip: /^\\/text/ }`\n\nPassing `true` will enable this check for all files.\nPassing a RegExp instance will only enable this check if the content-type of the\nrespond would match that RegExp using its test() method.\n\n> Defaults to `false`\n\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revalidate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","readmeFilename":"README.md","_id":"node-static@0.7.1","dist":{"shasum":"d53558b2ff95550371a9c9d1d453a99952f6927f","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.7.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.7.2":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"http://github.com/cloudhead/node-static"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0","mime":">=1.2.9"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.7.2","engines":{"node":">= 0.4.1"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        }).resume();\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n \n    var static = require('node-static');\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        }).resume();\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        }).resume();\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var static = require('node-static');\n    \n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        }).resume();\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\n#### `gzip` #\n\nEnable support for sending compressed responses.  This will enable a check for a\nfile with the same name plus '.gz' in the same folder.  If the compressed file is\nfound and the client has indicated support for gzip file transfer, the contents\nof the .gz file will be sent in place of the uncompressed file along with a\nContent-Encoding: gzip header to inform the client the data has been compressed.\n\nexample: `{ gzip: true }`\nexample: `{ gzip: /^\\/text/ }`\n\nPassing `true` will enable this check for all files.\nPassing a RegExp instance will only enable this check if the content-type of the\nrespond would match that RegExp using its test() method.\n\n> Defaults to `false`\n\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revalidate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/cloudhead/node-static/issues"},"_id":"node-static@0.7.2","dist":{"shasum":"3044e18eac1286411d737bd372c757556f7f497a","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.7.2.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}},"0.7.3":{"name":"node-static","description":"simple, compliant file streaming module for node","url":"http://github.com/cloudhead/node-static","keywords":["http","static","file","server"],"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"contributors":[{"name":"Pablo Cantero","email":"pablo@pablocantero.com"}],"repository":{"type":"git","url":"http://github.com/cloudhead/node-static"},"main":"./lib/node-static","scripts":{"test":"vows --spec --isolate"},"bin":{"static":"bin/cli.js"},"license":"MIT","dependencies":{"optimist":">=0.3.4","colors":">=0.6.0","mime":">=1.2.9"},"devDependencies":{"request":"latest","vows":"latest"},"version":"0.7.3","engines":{"node":">= 0.4.1"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        }).resume();\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n \n    var static = require('node-static');\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        }).resume();\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        }).resume();\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var static = require('node-static');\n    \n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        }).resume();\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\n#### `gzip` #\n\nEnable support for sending compressed responses.  This will enable a check for a\nfile with the same name plus '.gz' in the same folder.  If the compressed file is\nfound and the client has indicated support for gzip file transfer, the contents\nof the .gz file will be sent in place of the uncompressed file along with a\nContent-Encoding: gzip header to inform the client the data has been compressed.\n\nexample: `{ gzip: true }`\nexample: `{ gzip: /^\\/text/ }`\n\nPassing `true` will enable this check for all files.\nPassing a RegExp instance will only enable this check if the content-type of the\nrespond would match that RegExp using its test() method.\n\n> Defaults to `false`\n\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revalidate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/cloudhead/node-static/issues"},"homepage":"https://github.com/cloudhead/node-static","_id":"node-static@0.7.3","dist":{"shasum":"fdd215e98e7a30fe830f6782046d7356102fdb3b","tarball":"http://registry.npmjs.org/node-static/-/node-static-0.7.3.tgz"},"_from":".","_npmVersion":"1.3.21","_npmUser":{"name":"phstc","email":"pablo@pablocantero.com"},"maintainers":[{"name":"phstc","email":"pablo@pablocantero.com"}],"directories":{}}},"maintainers":[{"name":"cloudhead","email":"self@cloudhead.net"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"phstc","email":"pablo@pablocantero.com"}],"time":{"modified":"2014-01-10T16:33:19.389Z","created":"2011-05-02T20:48:29.228Z","0.5.6":"2011-05-02T20:48:29.576Z","0.5.7":"2011-07-22T16:38:27.129Z","0.5.8":"2011-08-09T19:03:16.598Z","0.5.9":"2011-08-13T22:05:36.945Z","0.6.0":"2012-06-28T17:57:17.507Z","0.6.1":"2012-08-26T23:05:33.004Z","0.6.2":"2012-09-16T16:46:10.486Z","0.6.3":"2012-10-14T03:09:04.284Z","0.6.4":"2012-10-19T12:14:15.120Z","0.6.5":"2012-11-17T01:50:48.390Z","0.6.6":"2012-12-22T02:52:58.023Z","0.6.7":"2012-12-31T10:39:29.965Z","0.6.8":"2013-04-02T00:49:27.345Z","0.6.9":"2013-04-11T18:09:22.433Z","0.7.0":"2013-06-28T15:28:03.369Z","0.7.1":"2013-08-26T20:27:07.056Z","0.7.2":"2013-10-21T01:02:52.700Z","0.7.3":"2014-01-10T16:33:19.389Z"},"author":{"name":"Alexis Sellier","email":"self@cloudhead.net"},"users":{"naholyr":true,"fgribreau":true,"pana":true},"repository":{"type":"git","url":"http://github.com/cloudhead/node-static"},"readme":"node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require('node-static');\n\n    //\n    // Create a node-static server instance to serve the './public' folder\n    //\n    var file = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        }).resume();\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server('./public');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server('./public', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n \n    var static = require('node-static');\n\n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response);\n        }).resume();\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile('/error.html', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn't found:\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn't found\n                    fileServer.serveFile('/not-found.html', 404, {}, request, response);\n                }\n            });\n        }).resume();\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var static = require('node-static');\n    \n    var fileServer = new static.Server('./public');\n\n    require('http').createServer(function (request, response) {\n        request.addListener('end', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        }).resume();\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn't found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener('error', function (err) {\n        sys.error(\"Error serving \" + request.url + \" - \" + err.message);\n    });\n\nWith this method, you don't have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: \"myserver\" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ 'X-Hello': 'World!' }`\n\n> defaults to `{}`\n\n#### `gzip` #\n\nEnable support for sending compressed responses.  This will enable a check for a\nfile with the same name plus '.gz' in the same folder.  If the compressed file is\nfound and the client has indicated support for gzip file transfer, the contents\nof the .gz file will be sent in place of the uncompressed file along with a\nContent-Encoding: gzip header to inform the client the data has been compressed.\n\nexample: `{ gzip: true }`\nexample: `{ gzip: /^\\/text/ }`\n\nPassing `true` will enable this check for all files.\nPassing a RegExp instance will only enable this check if the content-type of the\nrespond would match that RegExp using its test() method.\n\n> Defaults to `false`\n\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving \".\" at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving \"public\" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H '{\"Cache-Control\": \"no-cache, must-revalidate\"}'\n    serving \".\" at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving \".\" at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n","_attachments":{},"_etag":"\"5ANV3SX8PNWMXIITRTARV24XR\""}